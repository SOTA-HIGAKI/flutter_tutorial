import 'package:english_words/english_words.dart';
import 'package:flutter/material.dart';

class RandomWords extends StatefulWidget {
  // generated by "stful"
  const RandomWords({Key? key}) : super(key: key);

  @override
  State<RandomWords> createState() => _RandomWordsState();
}

class _RandomWordsState extends State<RandomWords> {
  final _suggestions = <WordPair>[];
  final _saved = <WordPair>{};
  final _biggerFont = const TextStyle(fontSize: 18.0);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Startup Name Generator'),
        actions: [
          IconButton(
            onPressed: _pushSaved,
            icon: const Icon(Icons.list),
            tooltip: 'Saved suggestions',
          )
        ],
      ),
      body: ListView.builder(
          padding:
              const EdgeInsets.all(16.0), // padding from left edge of window
          itemBuilder: (context, i) {
            if (i.isOdd) return const Divider();

            final index = i ~/ 2; // floor()
            if (index >= _suggestions.length) {
              _suggestions.addAll(generateWordPairs().take(
                  10)); // add 10 words if suggestions already have not remain words
            }
            return _buildRow(_suggestions[index]);
          }),
    );
  }

  Widget _buildRow(WordPair pair) {
    final alreadySaved = _saved.contains(pair);
    return ListTile(
      title: Text(
        pair.asPascalCase,
        style: _biggerFont,
      ),
      trailing: Icon(
        alreadySaved ? Icons.favorite : Icons.favorite_border,
        color: alreadySaved ? Colors.red : null,
        semanticLabel: alreadySaved ? 'Remove from saved' : 'Save',
      ),
      onTap: () {
        setState(() {
          if (alreadySaved) {
            _saved.remove(pair);
          } else {
            _saved.add(pair);
          }
        });
      },
    );
  }

  void _pushSaved() {
    Navigator.of(context).push(MaterialPageRoute(builder: (context) {
      final tiles = _saved.map((pair) => ( // equal to forEach method
              ListTile(
                  title: Text(
            pair.asPascalCase,
            style: _biggerFont,
          ))));
      final divided = tiles.isNotEmpty
          ? ListTile.divideTiles(
              context: context,
              tiles: tiles,
            ).toList()
          : <Widget>[];

      return Scaffold(
          appBar: AppBar(
            title: const Text('Saved suggestions'),
          ),
          body: ListView(
            children: divided,
          ));
    }));
  }
}